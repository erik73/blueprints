blueprint:
  name: Tibber price and thermostat control
  description: >
    Trigger actions (e.g. toggle HVAC) depending on temperature and electricity price. Actions are triggered *intelligently* when price, temperature or thermostat setting change.


    First create a numeric helper as a thermostat control to set the temperature threshold.
  domain: automation
  input:
    tibber_price_sensor:
      name: Tibber price sensor
      selector:
        entity:
          domain: sensor
    temperature_sensor:
      name: Thermostat sensor
      description: Temperature sensor.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    thermostat:
      name: Thermostat setting
      description: Numeric helper entity.
      selector:
        entity:
          domain: input_number
    price_threshold:
      name: Electricity price threshold
      description: When to consider prices low. (Tibber price level)
      default: "CHEAP"
      selector:
        select:
          options:
          - label: Very expensive
            value: VERY_EXPENSIVE
          - label: Expensive
            value: EXPENSIVE
          - label: Normal
            value: NORMAL
          - label: Cheap
            value: CHEAP
          - label: Very cheap
            value: VERY_CHEAP
    below_actions:
      name: Low prices and temperature below thermostat setting
      description: Actions to perform.
      default: []
      selector:
        action: {}
    above_actions:
      name: High prices or temperature above thermostat setting
      description: Actions to perform.
      default: []
      selector:
        action: {}
mode: restart
max_exceeded: silent
trigger:
- platform: state
  alias: price
  entity_id: !input tibber_price_sensor
  attribute: price_level
- platform: state
  alias: thermostat
  entity_id: !input thermostat
- platform: state
  alias: temperature
  entity_id: !input temperature_sensor
action:
- variables:
    levels: "{{ ['VERY_CHEAP','CHEAP','NORMAL','EXPENSIVE','VERY_EXPENSIVE'] }}"
    price: !input tibber_price_sensor
    price_threshold: !input price_threshold
    price_changed: "{{ trigger.alias == 'price' }}"
    price_level: "{{ state_attr(price,'price_level') }}"
    price_is_low: "{{ price_level in levels and levels.index(price_level) <= levels.index(price_threshold) }}"
    thermostat: !input thermostat
    thermostat_changed: "{{ trigger.alias == 'thermostat' }}"
    temperature: !input temperature_sensor
    temperature_changed: "{{ trigger.alias == 'temperature' }}"
    temperature_is_low: "{{ states(temperature)|float < states(thermostat)|float }}"
- choose:
  - conditions:
    - condition: or
      conditions: 
      - condition: and
        conditions:         
        - "{{ price_changed }}"                                                                           #Priset har ändrats
        - "{{ levels.index(trigger.to_state.attributes.price_level) <= levels.index(price_threshold) }}"  #Prisnivå i tibber går till en nivå som är lika med eller mindre än inställd prisnivå
        - "{{ levels.index(trigger.from_state.attributes.price_level) > levels.index(price_threshold) }}" #Prisnivå i tibber går från en nivå som är störra än inställd prisnivå
        - "{{ temperature_is_low }}"                                                                      #Temperaturen i rummet är lägre än inställd starttemp
      - condition: and
        conditions:
        - "{{ temperature_changed }}"                                                                     #Temperaturen i rummet har ändrats
        - "{{ trigger.to_state.state|float < states(thermostat)|float }}"                                 #Temperaturen går till en nivå som är < inställd starttemp
        - "{{ trigger.from_state.state|float >= states(thermostat)|float }}"                              #Temperaturen går från en nivå som är >= inställd starttemp
        - "{{ price_is_low }}"                                                                            #Priset är lågt
      - condition: and
        conditions:
        - "{{ thermostat_changed }}"                                                                      #Termostaten har ändrats
        - "{{ trigger.to_state.state|float > states(temperature)|float }}"                                #Termostaten går till en ett värde som är > rummets temp
        - "{{ trigger.from_state.state|float <= states(temperature)|float }}"                             #Termostaten går från en inställn som <= eller lika med temperaturen i rummet
        - "{{ price_is_low }}"                                                                            #Priset är lågt
    sequence: !input below_actions
  - conditions:
    - condition: or
      conditions: 
      - condition: and
        conditions: 
        - "{{ price_changed }}"                                                                             #Priset har ändrats
        - "{{ levels.index(trigger.to_state.attributes.price_level) > levels.index(price_threshold) }}"     #Prisnåivå i tibber går till en nivå som > inställd prisnivå
        - "{{ levels.index(trigger.from_state.attributes.price_level) <= levels.index(price_threshold) }}"  #Prisnåivå i tibber går från en nivå <= inställd prisnivå
        - "{{ temperature_is_low }}"                                                                        #Temperaturen är låg
      - condition: and
        conditions:
        - "{{ temperature_changed }}"                                                                       #Temperaturen har ändrats i rummet
        - "{{ trigger.to_state.state|float >= states(thermostat)|float }}"                                  #Temperaturen går till ett värde som är >= inställd temperatur
        - "{{ trigger.from_state.state|float < states(thermostat)|float }}"                                 #Temperaturen går från ett värde som är < inställd temperatur
        - "{{ price_is_low }}"                                                                              #Priset är lågt
      - condition: and
        conditions:
        - "{{ thermostat_changed }}"                                                                        #Termostaten har ändrats
        - "{{ trigger.to_state.state|float <= states(temperature)|float }}"                                 #Termostaten går till ett värde som är <= rummets temperatur
        - "{{ trigger.from_state.state|float > states(temperature) |float}}"                                #Termostaten går från ett värde som är > rummets temp
        - "{{ price_is_low }}"                                                                              #Priset är lågt
    sequence: !input above_actions